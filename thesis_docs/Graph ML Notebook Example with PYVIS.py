# -*- coding: utf-8 -*-
"""Assignment 1 - Biel Pitman Travel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fYOFd5JhxtUDViW35AdMm8HrcWSEk1uB

# Mount GDrive & Install Libraries
"""

from google.colab import drive
drive.mount('/content/drive')

# Install required packages
!pip install networkx geopy matplotlib pandas gspread gspread-dataframe



"""# Load Google Sheets Data"""

import pandas as pd

# Google Sheets parameters
sheet_id = "1d3mq_cw6Ya21DzTDOl6xmUKi3-tKMsS3UKz29doyK0E"
sheet_name = "Sheet1"  # change this if the tab name is different

# Construct the CSV export URL
url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/gviz/tq?tqx=out:csv&sheet={sheet_name}"

# Load the CSV into a pandas DataFrame
df = pd.read_csv(url)
df.head()

"""# Import networkx to build a basic graph"""

import networkx as nx
import matplotlib.pyplot as plt

# Create an undirected graph
G = nx.Graph()

# Add edges from origin to location
for i, row in df.iterrows():
    G.add_edge(row['Origin'], row['Location'])

# Draw the graph
plt.figure(figsize=(10, 6))
nx.draw(G, with_labels=True, node_size=1000, node_color='lightblue', edge_color='gray')
plt.title("Simple Origin-Destination Travel Graph")
plt.show()

"""# Trying to improve visualization with Spring Layout"""

# Enhanced visualization of graph
plt.figure(figsize=(20, 14))  # Bigger figure

# Use spring layout for better spacing
pos = nx.spring_layout(G, k=0.3, iterations=50)

# Draw nodes and edges
nx.draw_networkx_nodes(G, pos, node_size=500, node_color='skyblue')
nx.draw_networkx_edges(G, pos, edge_color='lightgray')

# Draw labels with font scaling
nx.draw_networkx_labels(G, pos, font_size=8, font_family='sans-serif')

plt.title("Improved Origin-Destination Travel Graph", fontsize=16)
plt.axis('off')
plt.tight_layout()
plt.show()

"""# Coloring Nodes by Continent"""

# Defining a color map for continents
continent_colors = {
    'Europe': 'cornflowerblue',
    'Asia': 'orange',
    'North America': 'limegreen',
    'South America': 'salmon',
    'Africa': 'gold',
    'Oceania': 'plum',
    'Antarctica': 'lightgray'
}

# Dictionary mapping location to continent
location_to_continent = df.set_index('Location')['Continent'].to_dict()

# Node colors based on the continent of destination
node_colors = []
for node in G.nodes:
    continent = location_to_continent.get(node)
    node_colors.append(continent_colors.get(continent, 'lightgray'))  # default gray if unknown

plt.figure(figsize=(20, 14))
pos = nx.spring_layout(G, k=0.3, iterations=50)

nx.draw_networkx_nodes(G, pos, node_color=node_colors, node_size=500)
nx.draw_networkx_edges(G, pos, edge_color='gray', alpha=0.5)
nx.draw_networkx_labels(G, pos, font_size=8)

plt.title("Travel Graph Colored by Continent", fontsize=16)
plt.axis('off')
plt.tight_layout()
plt.show()

"""# Adding a legend"""

import matplotlib.patches as mpatches

# Legend handles
legend_handles = [mpatches.Patch(color=color, label=continent)
                  for continent, color in continent_colors.items()]

# Plot again but with legend
plt.figure(figsize=(20, 14))
pos = nx.spring_layout(G, k=0.3, iterations=50)

nx.draw_networkx_nodes(G, pos, node_color=node_colors, node_size=500)
nx.draw_networkx_edges(G, pos, edge_color='gray', alpha=0.5)
nx.draw_networkx_labels(G, pos, font_size=8)

# Adding the legend
plt.legend(handles=legend_handles, title="Continents", loc='lower left', fontsize=10, title_fontsize=12)

plt.title("Travel Graph Colored by Continent (with Legend)", fontsize=16)
plt.axis('off')
plt.tight_layout()
plt.show()

"""# Adjusting Node sizes based on visits frequency

Counting node frequencies and creating sizes
"""

from collections import Counter

# Flattenning all cities I visited
all_cities = []
for journey in df['Journey']:
    stops = [city.strip().title() for city in journey.split(',')]
    all_cities.extend(stops)

# Frequency of each city count
visit_counts = Counter(all_cities)

# Size list for nodes based on visit frequency
node_sizes = [300 + visit_counts.get(node, 1) * 50 for node in G.nodes]

plt.figure(figsize=(20, 14))
pos = nx.spring_layout(G, k=0.3, iterations=50)

nx.draw_networkx_nodes(G, pos, node_color=node_colors, node_size=node_sizes)
nx.draw_networkx_edges(G, pos, edge_color='gray', alpha=0.5)
nx.draw_networkx_labels(G, pos, font_size=8)

# Reusing legend
plt.legend(handles=legend_handles, title="Continents", loc='lower left', fontsize=10, title_fontsize=12)

plt.title("Travel Graph — Scaled by Visit Frequency", fontsize=16)
plt.axis('off')
plt.tight_layout()
plt.show()

"""# Adjusting font size based on node scale"""

# Font size map per node based on visit frequency
label_font_sizes = {}
for node in G.nodes:
    count = visit_counts.get(node, 1)
    size = min(6 + count * 0.5, 20)  # restrict font size to a reasonable max
    label_font_sizes[node] = size

plt.figure(figsize=(22, 16))
pos = nx.spring_layout(G, k=0.3, iterations=50)

nx.draw_networkx_nodes(G, pos, node_color=node_colors, node_size=node_sizes)
nx.draw_networkx_edges(G, pos, edge_color='gray', alpha=0.5)

# Labels with custom font sizes
for node, (x, y) in pos.items():
    plt.text(x, y, node, fontsize=label_font_sizes[node], ha='center', va='center')

# Legend
plt.legend(handles=legend_handles, title="Continents", loc='lower left', fontsize=10, title_fontsize=12)
plt.title("Travel Graph — Scaled Labels by Visit Frequency", fontsize=16)
plt.axis('off')
plt.tight_layout()
plt.show()

"""# Interactive version with PYVIS"""

!pip install pyvis

from pyvis.network import Network

# Create interactive Network object
net = Network(height="800px", width="100%", bgcolor="#222222", font_color="white")

# Add nodes with size and color
for node in G.nodes:
    visits = visit_counts.get(node, 1)
    size = 10 + visits * 2
    continent = location_to_continent.get(node, 'Unknown')
    color = continent_colors.get(continent, 'gray')

    net.add_node(node,
                 label=node,
                 title=f"{node} — {visits} visits",
                 color=color,
                 size=size)

# Add edges
for source, target in G.edges:
    net.add_edge(source, target, color="lightgray")

# Add physics layout
net.repulsion(node_distance=120, spring_length=200)

# Write to HTML
net.write_html("travel_graph_interactive.html")

# File download
from google.colab import files
files.download("travel_graph_interactive.html")

"""# Directed Graph Option"""

# Create a directed graph from full journey paths
DG = nx.DiGraph()

# Track frequency as well
visit_counts_directed = Counter()

for journey in df["Journey"]:
    cities = [c.strip().title() for c in journey.split(",")]
    for city in cities:
        visit_counts_directed[city] += 1
    for i in range(len(cities) - 1):
        source = cities[i]
        target = cities[i + 1]
        DG.add_edge(source, target)

from collections import Counter
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches

# Define color mapping again (just in case)
continent_colors = {
    'Europe': 'cornflowerblue',
    'Asia': 'orange',
    'North America': 'limegreen',
    'South America': 'salmon',
    'Africa': 'gold',
    'Oceania': 'plum',
    'Antarctica': 'lightgray'
}

# Create directed graph and visit counter
DG = nx.DiGraph()
visit_counts_directed = Counter()

for journey in df["Journey"]:
    cities = [c.strip().title() for c in journey.split(",")]
    for city in cities:
        visit_counts_directed[city] += 1
    for i in range(len(cities) - 1):
        DG.add_edge(cities[i], cities[i + 1])

# Map city to continent based on destinations
location_to_continent_directed = df.set_index('Location')['Continent'].to_dict()

# Assign colors to nodes
node_colors_directed = [
    continent_colors.get(location_to_continent_directed.get(node, ''), 'lightgray')
    for node in DG.nodes
]

# Assign node sizes and font sizes
node_sizes_directed = [300 + visit_counts_directed[node] * 50 for node in DG.nodes]
label_font_sizes_directed = {node: min(6 + visit_counts_directed[node] * 0.5, 20) for node in DG.nodes}

# Create legend handles
legend_handles = [mpatches.Patch(color=color, label=continent)
                  for continent, color in continent_colors.items()]

"""Style Consistency"""

plt.figure(figsize=(24, 18))
pos = nx.spring_layout(DG, k=0.3, iterations=50)

# Draw nodes and edges
nx.draw_networkx_nodes(DG, pos, node_color=node_colors_directed, node_size=node_sizes_directed)
nx.draw_networkx_edges(DG, pos, edge_color='gray', alpha=0.4, arrows=True)

# Draw custom labels
for node, (x, y) in pos.items():
    plt.text(x, y, node, fontsize=label_font_sizes_directed[node], ha='center', va='center')

# Legend (same as before)
import matplotlib.patches as mpatches
legend_handles = [mpatches.Patch(color=color, label=continent)
                  for continent, color in continent_colors.items()]
plt.legend(handles=legend_handles, title="Continents", loc='lower left', fontsize=10, title_fontsize=12)

plt.title("Directed Trip Chain Network — Styled by Continent and Frequency", fontsize=18)
plt.axis('off')
plt.tight_layout()
plt.show()

"""# Interactive Directive Network V1 with PYVIS"""

from pyvis.network import Network

# Initialize interactive network with physics
net_directed = Network(height="800px", width="100%", directed=True,
                       bgcolor="#222222", font_color="white")

# Add styled nodes
for node in DG.nodes:
    visits = visit_counts_directed.get(node, 1)
    size = 10 + visits * 2
    continent = location_to_continent_directed.get(node, 'Unknown')
    color = continent_colors.get(continent, 'gray')

    net_directed.add_node(
        node,
        label=node,
        title=f"{node} — {visits} visits",
        color=color,
        size=size
    )

# Add directed edges
for source, target in DG.edges:
    net_directed.add_edge(source, target, color="lightgray")

# Enable physics layout for better spacing
net_directed.repulsion(node_distance=150, spring_length=200)

# Export to HTML
net_directed.write_html("trip_chain_network_interactive.html")

"""download the file"""

from google.colab import files
files.download("trip_chain_network_interactive.html")

"""# Interactive Directive Network V2 with PYVIS"""

from pyvis.network import Network

# Create the interactive network (directed=True for arrows!)
net_dir = Network(height="800px", width="100%", bgcolor="#111111", font_color="white", directed=True)

# Add nodes with styling
for node in DG.nodes:
    visits = visit_counts_directed.get(node, 1)
    size = 10 + visits * 2
    continent = location_to_continent_directed.get(node, 'Unknown')
    color = continent_colors.get(continent, 'gray')

    net_dir.add_node(
        node,
        label=node,
        title=f"{node} — {visits} visits",
        color=color,
        size=size
    )

# Add directed edges
for source, target in DG.edges:
    net_dir.add_edge(source, target, color='lightgray', arrowStrikethrough=False)

# Layout settings for better physics
net_dir.repulsion(node_distance=150, spring_length=300)

# Export to HTML
net_dir.write_html("directed_trip_chain_graph.html")

"""file downloader"""

from google.colab import files
files.download("directed_trip_chain_graph.html")

"""# Worldmap with Folium"""

!pip install folium

"""# City List & Geocode"""

import time
from geopy.geocoders import Nominatim

geolocator = Nominatim(user_agent="trip_mapper_001")
coord_cache = {}

unique_cities = list(visit_counts_directed.keys())
results = []

for city in unique_cities:
    try:
        location = geolocator.geocode(city, timeout=10)
        if location:
            coord_cache[city] = (location.latitude, location.longitude)
            results.append({"City": city, "Latitude": location.latitude, "Longitude": location.longitude})
        else:
            coord_cache[city] = (None, None)
            results.append({"City": city, "Latitude": None, "Longitude": None})
        time.sleep(1.1)  # Respect Nominatim's rate limit
    except Exception as e:
        print(f"Failed to get {city}: {e}")
        coord_cache[city] = (None, None)
        results.append({"City": city, "Latitude": None, "Longitude": None})

"""# Save Coordinate to CSV"""

coord_df = pd.DataFrame(results)
coord_df.to_csv("city_coordinates.csv", index=False)
from google.colab import files
files.download("city_coordinates.csv")

from google.colab import files
uploaded = files.upload()

"""# Heatmap Data"""

# Load city coordinates
coord_df = pd.read_csv("city_coordinates.csv")

# Merge with visit counts
coord_df["Visits"] = coord_df["City"].map(visit_counts_directed)

# Filter out rows with missing coordinates
heat_data = coord_df.dropna(subset=["Latitude", "Longitude"])

# Build list for folium heatmap (lat, lon, weight)
heatmap_points = heat_data[["Latitude", "Longitude", "Visits"]].values.tolist()

"""# Build & Save Heatmap"""

import folium
from folium.plugins import HeatMap

# Create base map
base_map = folium.Map(location=[20, 0], zoom_start=2, tiles='CartoDB positron')

# Add heat layer
HeatMap(heatmap_points, min_opacity=0.4, radius=15, blur=18, max_zoom=6).add_to(base_map)

# Save to HTML
base_map.save("travel_heatmap.html")

files.download("travel_heatmap.html")